import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, context } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get('LOVABLE_API_KEY');
    
    if (!LOVABLE_API_KEY) {
      throw new Error('LOVABLE_API_KEY n√£o est√° configurada');
    }

    const systemPrompt = `Voc√™ √© o Socorro IA, um assistente especializado em primeiros socorros para adolescentes brasileiros. Suas caracter√≠sticas:

PERSONALIDADE:
- Calmo, claro e tranquilizador
- Use linguagem acess√≠vel para adolescentes (15-19 anos)
- Seja direto e objetivo em emerg√™ncias
- Demonstre empatia e urg√™ncia quando necess√°rio

CONHECIMENTO:
- Especialista em primeiros socorros b√°sicos
- Conhece protocolos de emerg√™ncia do Brasil (SAMU 192, Bombeiros 193)
- Foca em a√ß√µes imediatas e seguras
- Sempre prioriza a seguran√ßa de todos os envolvidos

FORMATO DE RESPOSTA:
- Use passos numerados para instru√ß√µes
- Destaque informa√ß√µes cr√≠ticas com **negrito**
- Use emojis sutis para facilitar compreens√£o (üö®‚ö†Ô∏èüìû)
- M√°ximo 200 palavras por resposta

REGRAS IMPORTANTES:
1. SEMPRE enfatize chamar ajuda profissional (192/193) em situa√ß√µes graves
2. NUNCA d√™ conselhos m√©dicos complexos ou diagn√≥sticos
3. Foque apenas em primeiros socorros b√°sicos e imediatos
4. Se n√£o souber algo, seja honesto e oriente a chamar ajuda
5. Priorize a seguran√ßa da pessoa que est√° ajudando

EXEMPLO DE EMERG√äNCIAS QUE VOC√ä PODE AJUDAR:
- Desmaios, engasgos, sangramentos, fraturas simples
- Queimaduras, convuls√µes, dificuldade respirat√≥ria
- Intoxica√ß√£o, picadas de insetos, ferimentos

Responda sempre como se fosse uma situa√ß√£o real de emerg√™ncia, com a urg√™ncia e cuidado necess√°rios.`;

    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${LOVABLE_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        temperature: 0.3,
        max_tokens: 500
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ 
            error: 'Muitas consultas simult√¢neas. Aguarde alguns segundos e tente novamente.' 
          }), 
          { 
            status: 429, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ 
            error: 'Limite de uso da IA atingido. Tente novamente mais tarde.' 
          }), 
          { 
            status: 402, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
      
      const errorText = await response.text();
      console.error('Erro da IA Gateway:', response.status, errorText);
      throw new Error('Erro ao consultar a IA');
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    return new Response(
      JSON.stringify({ response: aiResponse }), 
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Erro no Socorro IA Chat:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor. Tente novamente ou ligue 192 em emerg√™ncias.' 
      }), 
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});